#!/usr/bin/env python3
"""
Update Wikitech wiki with new deployment calendar, archive old week.
"""

import os
import subprocess

import mwparserfromhell
import pywikibot

from context import deploymentcalendar


SITE = pywikibot.Site('en', 'wikitech')

# May be useful for testing in a sandbox
# BASE_PAGE = 'User:DeploymentCalendarTool/Deployments'
BASE_PAGE = 'Deployments'


class DeploymentPage(object):
    """
    Abstraction for calendar wikipages
    """
    def __init__(self, site, page, text):
        self.site = site
        self.page = page
        self.text = text
        self.wikicode = mwparserfromhell.parse(self.text)

    def _newest_week_index(self):
        """
        Return the first heading after the last "week of" heading on the
        page. If there are no headlines after the "week of" headings, return
        False.
        """
        in_weeks = False
        for section in self.wikicode.get_sections():
            headings = section.filter_headings()
            heading_text = '\n'.join([str(x).lower() for x in headings])
            if 'week of' in heading_text or 'deployment_day' in heading_text:
                in_weeks = True
            else:
                if in_weeks:
                    return self.wikicode.index(headings[0], recursive=True)

        return False

    def _oldest_week_index(self):
        for section in self.wikicode.get_sections():
            headings = section.filter_headings()
            if 'week of' in '\n'.join([str(x).lower() for x in headings]):
                return self.wikicode.index(headings[0], recursive=True)

        raise RuntimeError('The phrase "Week of" was not found')

    def add_week(self, week):
        idx = self._newest_week_index()
        if idx:
            self.wikicode.insert(idx, week)
        else:
            self.append_text(week)

    def append_text(self, text):
        self.wikicode.append(text)

    def pop_week(self, section_headline):
        for section in self.wikicode.get_sections():
            headings = section.filter_headings()
            if section_headline in '\n'.join([str(x) for x in headings]):
                # newlines needed to ensure wikitext parses correctly
                week = "\n\n" + str(section)
                self.wikicode.remove(section)
                return week

    def write(self, message=''):
        self.page.text = str(self.wikicode)
        self.page.save(message)


if __name__ == '__main__':
    # The python date modules including dateutils kind of suck.
    # Here I'm shelling out to "date" which seems to make me happier.
    monday = deploymentcalendar.findtrain.get_next_monday(
        deploymentcalendar.findtrain.parse_date(
            subprocess.getoutput('date -I --date=Monday+7days')
        )
    )
    tf = deploymentcalendar.findtrain.find_train_finder(monday)

    new_week = '\n\n{}\n\n'.format(
        deploymentcalendar.get_schedule(
            tf, deploymentcalendar.DEFAULT_CONFIG, wiki_fmt='ve'
        )
    )

    old_week = 'Week of {}'.format(
        subprocess.getoutput('date --date=Monday-7days +"%B %d"')
    )
    old_week_archive = subprocess.getoutput('date --date=Monday-7days +"%Y/%m"')

    page = pywikibot.Page(SITE, BASE_PAGE)
    archive_page = pywikibot.Page(
        SITE,
        os.path.join(
            BASE_PAGE,
            'Archive',
            old_week_archive
        )
    )
    text = page.text
    archive_text = archive_page.text

    dp = DeploymentPage(SITE, page, text)
    dap = DeploymentPage(SITE, archive_page, archive_text)

    pop_week = dp.pop_week(old_week)
    dp.add_week(new_week)
    dp.write('Remove {}'.format(old_week))

    dap.append_text(pop_week)
    dap.write('Add last week')
