#!/bin/bash

# Copyright Â© 2016 Mukunda Modell, Tyler Cipriani, Lars Wirzenius
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# http://www.gnu.org/copyleft/gpl.html
#

# deploy-promote promotes a specified group of wikis to the specified
# wmf deployment branch (or the latest branch if none is specified)
#
# Example usage:
#
# bin/deploy-promote group0 1.26wmf10
#
# The above command promotes all group0 wikis (testwiki and mediawiki.org)
# to version 1.26wmf10.

set -eu

REPO=$(cd "$(dirname "$(dirname "$0")")"; pwd -P)

ALWAYS_YES=

usage() {
    cat <<HELP
usage: $0 [ -y|--yes ] [ dblist [ version ] ]
       $0 -h

positional arguments:
    dblist      existing dblist/group to which you'd like to deploy a
                new version (group0, group1, or all). Defaults to "group1".
    version     version to deploy (ex: 1.36.0-wmf.2). Defaults to the
                latest version found in "/srv/mediawiki-staging/$(wikiversions_filename)"

optional arguments:
    -h, --help  show this help message and exit
    -y, --yes   Answer yes to all prompts

HELP
}

# Sets DC and REALM globals
set_realm() {
    DC="$(cat /etc/wikimedia-cluster)"

    case "$DC" in
        dev|labs)
            REALM="$DC"
            ;;
        *)
            REALM=production
            ;;
    esac
}

# Assumes that set_realm has been called first.
wikiversions_filename() {
    case "$REALM" in
        production)
            echo "wikiversions.json"
            ;;
        *)
            echo "wikiversions-$REALM.json"
            ;;
    esac
}

notify() {
    printf '[INFO] %s\n' "$@"
}

die() {
    local exit_code="$1"
    shift
    printf '[EXITING] %s\n' "$@"
    exit "$exit_code"
}

abort() {
    die 2 "Aborted by user"
}

ask() {
    if [ "$ALWAYS_YES" ]; then
	return 0
    fi

    # http://djm.me/ask
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question - use /dev/tty in case stdin is redirected from somewhere else
        read -rp "$1 [$prompt] " REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

print_results() {
    local res="$1"
    printf '==================================================\n'
    printf 'Checking version on %s\n' "$URLTOCHECK"
    printf 'Expect: %s\n' "$VERSION"
    printf 'Result: %s\n' "$res"
    printf '==================================================\n'
}

check_versions() {
    CHECKDOMAIN="en.wikipedia.org"

    if [[ "$GRP" == "group1" ]]; then
        CHECKDOMAIN="en.wikinews.org"
    elif [[ "$GRP" == "group0" ]]; then
        CHECKDOMAIN="www.mediawiki.org"
    elif [[ "$GRP" == "testwikis" ]]; then
        CHECKDOMAIN="test.wikipedia.org"
    fi

    URLTOCHECK="https://$CHECKDOMAIN/wiki/Special:Version"

    if curl -sS $URLTOCHECK | grep -o "$VERSION" &> /dev/null; then
        print_results "SUCCESS"
    else
        print_results "FAIL"
        exit 3
    fi
}

assert_repository_is_clean() {
    if [ "$(git -C "$REPO" status --porcelain)" != "" ]; then
        echo "Git repo $REPO is not clean!"
        echo
        git -C "$REPO" status
        echo
        if ask "Continue anyway?" N; then
            echo 'continuing...'
        else
            abort
        fi
    fi
}

remote_sha1() {
    git -C "$REPO" \
        ls-remote --quiet \
        https://gerrit.wikimedia.org/r/mediawiki/tools/release \
        refs/heads/master \ |
        awk '{print $1}'
}

local_sha1() {
    git -C "$REPO" rev-parse --verify HEAD
}

assert_repository_is_updated() {
    local remote_head local_head

    remote_head="$(remote_sha1)"
    local_head="$(local_sha1)"

    if [ "$remote_head" != "$local_head" ]; then
        printf 'The "mediawiki/tools/release" repo is not up-to-date with upstream!\n'
        printf '(remote: "%s" != local: "%s")\n' "$remote_head" "$local_head"
        if ask "Continue anyway?" N; then
            printf 'continuing...\n'
        else
            abort
        fi
    fi
}

select_git_push_dest() {
    local branch

    branch=$(git symbolic-ref --short HEAD)

    # Does the remote looks like a simple git server?
    if git remote get-url origin | grep -q '^git://git'; then
        # Use the current branch name
	echo "$branch"
    else
        # Gerrit is assumed otherwise
        echo "refs/for/${branch}%topic=${VERSION},l=Code-Review+2"
    fi
}

commit_has_arrived() {
    local changeid="$1"

    git fetch # FIXME: silence
    git log HEAD..FETCH_HEAD | grep -q "$changeid"
}

file_updated() {
    local file="$1"

    git status --porcelain "$file" | grep -q '^ M'
}

update_versions() {
    set -e

    cd /srv/mediawiki-staging/

    scap update-wikiversions "$GRP" "${VERSION}"

    MSG="${GRP} wikis to ${VERSION}"
    if [[ "$PROMOTE_MSG" != "" ]]; then
        MSG="${MSG} ${PROMOTE_MSG}"
    fi

    local files_to_commit="$(wikiversions_filename) php"
    local changed=

    for file in $files_to_commit; do
       if file_updated "$file"; then
           git add "$file"
           changed=1
       fi
    done

    if [ "$changed" ]; then
       git commit -m "$MSG"
       local changeid=$(git log -1 | grep Change-Id:)
       git push origin "HEAD:$(select_git_push_dest)"
       git reset --hard HEAD^

       echo -n "Waiting for jenkins to merge the patch"

       while ! commit_has_arrived "$changeid"; do
            echo -n "."
            sleep 5
       done
       echo

       notify "Running git pull"

       git pull
    fi

    if [[ "$GRP" == "testwikis" ]]; then
        notify "Running scap sync-world"
        scap sync-world "$MSG"
    else
       notify "Running scap sync-wikiversions"
       scap sync-wikiversions "$MSG"
    fi

    # Group1 day is also the day we sync the php symlink
    if [[ "$GRP" == "group1" ]]; then
        notify "Running scap sync-file php"
        scap sync-file php "$MSG"
    fi

    set +e
    check_versions
}

main() {
    set_realm

    if ! TEMP=$(getopt -n "$0" -o 'hy' --long 'help,yes' -- "$@"); then
	usage
	exit 1
    fi

    eval set -- "$TEMP"
    unset TEMP

    while true; do
	case "$1" in
	    -h|--help)
		usage
		exit 0
		;;
	    -y|--yes)
		ALWAYS_YES=y
		shift
		;;
	    --)
		shift
		break
		;;
	    *)
		die 2 "This should never happen!"
		;;
	esac
    done

    OLDVERSION=$(scap wikiversions-inuse --staging | tr ' ' '\n' | sort --version-sort | head -1)
    NEWVERSION=$(scap wikiversions-inuse --staging | tr ' ' '\n' | sort --version-sort | head -2 | tail -1)
    GRP="${1:-group1}"
    VERSION="${2:-$NEWVERSION}"

    if [ ! -f "/srv/mediawiki-staging/dblists/$GRP.dblist" ]; then
        usage
        die 1 "'/srv/mediawiki-staging/dblists/$GRP.dblist' does not exist"
    fi

    assert_repository_is_clean
    assert_repository_is_updated

    PHABTASK=$(curl --proxy http://webproxy:8080 -s https://train-blockers.toolforge.org/api.php | jq '.current.task_id|match("^T[0-9]+").string' -r)
    PROMOTE_MSG=
    if [[ -n "${PHABTASK:-}" ]]; then
        PROMOTE_MSG=" refs ${PHABTASK}"
    fi

    if ask "Promote $GRP from ${OLDVERSION} to ${VERSION}${PROMOTE_MSG}" N; then
        update_versions
    else
        abort
    fi
}

main "$@"
